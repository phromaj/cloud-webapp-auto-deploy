---
- name: Deploy Docker Swarm Stack
  hosts: all
  become: true
  vars:
    ansible_ssh_private_key_file: ssh.pem
    ansible_ssh_common_args: >-
      -o StrictHostKeyChecking=no 
      -o UserKnownHostsFile=/dev/null
  tasks:
    - name: Ensure Docker is installed
      apt:
        name:
          - docker.io
          - python3-docker
        state: present
        update_cache: true

    - name: Ensure Docker service is started and enabled
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Add Ansible user to the Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Initialize Docker Swarm on manager
      docker_swarm:
        state: present
      when: inventory_hostname == groups['managers'][0]
      register: swarm_info

    - name: Get swarm manager join token
      command: docker swarm join-token -q manager
      when: inventory_hostname == groups['managers'][0]
      register: manager_token

    - name: Get swarm worker join token
      command: docker swarm join-token -q worker
      when: inventory_hostname == groups['managers'][0]
      register: worker_token

    - name: Join additional managers to swarm
      docker_swarm:
        state: join
        advertise_addr: "{{ ansible_default_ipv4.address }}"
        join_token: "{{ hostvars[groups['managers'][0]]['manager_token']['stdout'] }}"
        remote_addrs: ["{{ hostvars[groups['managers'][0]]['ansible_default_ipv4']['address'] }}"]
      when: inventory_hostname in groups['managers'][1:]

    - name: Join workers to swarm
      docker_swarm:
        state: join
        advertise_addr: "{{ ansible_default_ipv4.address }}"
        join_token: "{{ hostvars[groups['managers'][0]]['worker_token']['stdout'] }}"
        remote_addrs: ["{{ hostvars[groups['managers'][0]]['ansible_default_ipv4']['address'] }}"]
      when: inventory_hostname in groups['workers']

    - name: Create docker-compose.yml
      copy:
        dest: "/home/{{ ansible_user }}/docker-compose.yml"
        content: |
          version: '3.8'
          services:
            fastapi:
              image: ghcr.io/phromaj/cloud-webapp-auto-deploy:latest
              deploy:
                mode: replicated
                replicas: 3
              environment:
                - DATABASE_URL=postgresql://postgres:password@db:5432/mydatabase
              networks:
                - myapp_network

            db:
              image: postgres:15-alpine
              deploy:
                replicas: 1
                placement:
                  constraints: [node.role == manager]
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: password
                POSTGRES_DB: mydatabase
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - myapp_network

            nginx:
              image: nginx:latest
              deploy:
                mode: replicated
                replicas: 1
                placement:
                  constraints: [node.role == manager]
              ports:
                - target: 80
                  published: 80
                  protocol: tcp
                  mode: host
                - target: 443
                  published: 443
                  protocol: tcp
                  mode: host
              volumes:
                - /etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
                - /var/log/nginx:/var/log/nginx
              configs:
                - source: nginx_config
                  target: /etc/nginx/conf.d/default.conf
              networks:
                - myapp_network

          networks:
            myapp_network:
              driver: overlay
              name: myapp_network

          volumes:
            postgres_data:
            nginx_data:

          configs:
            nginx_config:
              file: /tmp/nginx.conf
      when: inventory_hostname == groups['managers'][0]

    - name: Create nginx.conf
      copy:
        dest: "/tmp/nginx.conf"
        content: |
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://fastapi:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }
      when: inventory_hostname == groups['managers'][0]

    - name: Remove existing stack
      command: docker stack rm myapp
      ignore_errors: yes
      when: inventory_hostname == groups['managers'][0]

    - name: Deploy stack
      command: docker stack deploy -c "/home/{{ ansible_user }}/docker-compose.yml" myapp
      when: inventory_hostname == groups['managers'][0]

    - name: Wait for services to stabilize
      shell: docker stack services myapp --format '{% raw %}{{.Replicas}}{% endraw %}' | grep -v '0/' | wc -l
      register: running_services
      until: running_services.stdout | int == 3
      retries: 3
      delay: 10
      when: inventory_hostname == groups['managers'][0]

    - name: Check individual service status
      shell: docker service ps {{ item }} --format "{% raw %}{{.Name}} {{.CurrentState}}{% endraw %}"
      loop:
        - myapp_fastapi
        - myapp_db
        - myapp_nginx
      register: service_status
      when: inventory_hostname == groups['managers'][0]

    - name: Display individual service status
      debug:
        var: service_status.results
      when: inventory_hostname == groups['managers'][0]

    - name: Display service status
      command: docker stack services myapp
      register: stack_status
      when: inventory_hostname == groups['managers'][0]

    - name: Show stack status
      debug:
        var: stack_status.stdout_lines
      when: inventory_hostname == groups['managers'][0]

    - name: Check service logs
      command: docker service logs {{ item }} --tail 50
      loop:
        - myapp_fastapi
        - myapp_db
        - myapp_nginx
      register: service_logs
      when: inventory_hostname == groups['managers'][0]

    - name: Display service logs
      debug:
        var: service_logs.results
      when: inventory_hostname == groups['managers'][0]

    - name: Check network status
      command: docker network ls --filter name=myapp_network
      register: network_status
      when: inventory_hostname == groups['managers'][0]

    - name: Display network status
      debug:
        var: network_status.stdout_lines
      when: inventory_hostname == groups['managers'][0]

    - name: Check Swarm status
      command: docker node ls
      register: swarm_status
      when: inventory_hostname == groups['managers'][0]

    - name: Display Swarm status
      debug:
        var: swarm_status.stdout_lines
      when: inventory_hostname == groups['managers'][0]
