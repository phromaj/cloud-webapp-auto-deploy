
---
- name: Deploy Docker Swarm Stack
  hosts: all
  become: yes
  vars:
    ansible_user: admin
    ansible_ssh_private_key_file: ssh.pem
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

  tasks:
    - name: Ensure Docker is installed
      apt:
        name:
          - docker.io
          - python3-docker
        state: present
        update_cache: yes

    - name: Ensure Docker service is started and enabled
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Initialize Docker Swarm on manager
      docker_swarm:
        state: present
      when: inventory_hostname == groups['managers'][0]
      register: swarm_info

    - name: Get swarm manager join token
      command: docker swarm join-token -q manager
      when: inventory_hostname == groups['managers'][0]
      register: manager_token

    - name: Get swarm worker join token
      command: docker swarm join-token -q worker
      when: inventory_hostname == groups['managers'][0]
      register: worker_token

    - name: Join additional managers to swarm
      docker_swarm:
        state: join
        advertise_addr: "{{ ansible_default_ipv4.address }}"
        join_token: "{{ hostvars[groups['managers'][0]]['manager_token']['stdout'] }}"
        remote_addrs: [ "{{ hostvars[groups['managers'][0]]['ansible_default_ipv4']['address'] }}" ]
      when: inventory_hostname in groups['managers'][1:]

    - name: Join workers to swarm
      docker_swarm:
        state: join
        advertise_addr: "{{ ansible_default_ipv4.address }}"
        join_token: "{{ hostvars[groups['managers'][0]]['worker_token']['stdout'] }}"
        remote_addrs: [ "{{ hostvars[groups['managers'][0]]['ansible_default_ipv4']['address'] }}" ]
      when: inventory_hostname in groups['workers']

    - name: Create docker-compose.yml
      copy:
        dest: /root/docker-compose.yml
        content: |
          version: '3.8'
          services:
            fastapi:
              image: ghcr.io/phromaj/cloud-webapp-auto-deploy:latest
              deploy:
                mode: global
              environment:
                - DATABASE_URL=postgresql://postgres:password@myapp_db:5432/mydatabase
              depends_on:
                - db

              networks:
                - myapp_network
            db:
              image: postgres:15-alpine
              deploy:
                replicas: 1
                placement:
                  constraints: [node.role == manager]
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: password
                POSTGRES_DB: mydatabase
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - myapp_network
            caddy:
              image: caddy:latest
              deploy:
                replicas: 1
                placement:
                  constraints: [node.role == manager]

              ports:
                - target: 80
                  published: 80
                  protocol: tcp
                  mode: host
                - target: 443
                  published: 443
                  protocol: tcp
                  mode: host
              volumes:
                - caddy_data:/data
                - caddy_config:/config
              configs:
                - source: caddy_config
                  target: /etc/caddy/Caddyfile
              depends_on:
                - fastapi
              networks:
                - myapp_network
          networks:
            myapp_network:
              driver: overlay
          volumes:
            postgres_data:
            caddy_data:
            caddy_config:
          configs:
            caddy_config:
              file: ./Caddyfile
      when: inventory_hostname == groups['managers'][0]

    - name: Create Caddyfile
      copy:
        dest: /root/Caddyfile
        content: |
          :80 {
              reverse_proxy fastapi:8000
          }
      when: inventory_hostname == groups['managers'][0]

    - name: Deploy stack
      command: docker stack deploy -c /root/docker-compose.yml myapp
      when: inventory_hostname == groups['managers'][0]

    - name: Wait for services to stabilize
      command: docker stack services myapp
      register: service_status
      until: "'0/3' not in service_status.stdout"
      retries: 30
      delay: 10
      when: inventory_hostname == groups['managers'][0]

    - name: Display service status
      debug:
        var: service_status.stdout_lines
      when: inventory_hostname == groups['managers'][0]

    - name: Check service logs
      command: docker service logs {{ item }} --tail 50
      loop:
        - myapp_fastapi
        - myapp_db
        - myapp_caddy
      register: service_logs
      when: inventory_hostname == groups['managers'][0]

    - name: Display service logs
      debug:
        var: item.stdout_lines
      loop: "{{ service_logs.results }}"
      when: inventory_hostname == groups['managers'][0]
