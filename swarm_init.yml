
---
- name: Deploy Docker Swarm Stack with FastAPI
  hosts: all
  become: yes
  vars:
    ansible_user: admin
    ansible_ssh_private_key_file: ssh.pem
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Check if docker.io is installed
      command: dpkg-query -W docker.io
      register: docker_check
      failed_when: docker_check.rc > 1
      changed_when: docker_check.rc == 1

    - name: Install docker.io if not present
      apt:
        name: docker.io
        state: present
      when: docker_check.rc == 1

    - name: Check if python3-docker is installed
      command: dpkg-query -W python3-docker
      register: python_docker_check
      failed_when: python_docker_check.rc > 1
      changed_when: python_docker_check.rc == 1

    - name: Install python3-docker if not present
      apt:
        name: python3-docker
        state: present
      when: python_docker_check.rc == 1

    - name: Check if python3-jsondiff is installed
      command: dpkg-query -W python3-jsondiff
      register: jsondiff_check
      failed_when: jsondiff_check.rc > 1
      changed_when: jsondiff_check.rc == 1

    - name: Install python3-jsondiff if not present
      apt:
        name: python3-jsondiff
        state: present
      when: jsondiff_check.rc == 1

    - name: Ensure Docker service is started and enabled
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Initialize Docker Swarm on manager
      docker_swarm:
        state: present
      when: inventory_hostname == groups['managers'][0]
      register: swarm_info

    - name: Get swarm manager join token
      command: docker swarm join-token -q manager
      when: inventory_hostname == groups['managers'][0]
      register: manager_token

    - name: Get swarm worker join token
      command: docker swarm join-token -q worker
      when: inventory_hostname == groups['managers'][0]
      register: worker_token

    - name: Join additional managers to swarm
      docker_swarm:
        state: join
        advertise_addr: "{{ ansible_default_ipv4.address }}"
        join_token: "{{ hostvars[groups['managers'][0]]['manager_token']['stdout'] }}"
        remote_addrs: [ "{{ hostvars[groups['managers'][0]]['ansible_default_ipv4']['address'] }}" ]
      when: inventory_hostname in groups['managers'][1:]

    - name: Join workers to swarm
      docker_swarm:
        state: join
        advertise_addr: "{{ ansible_default_ipv4.address }}"
        join_token: "{{ hostvars[groups['managers'][0]]['worker_token']['stdout'] }}"
        remote_addrs: [ "{{ hostvars[groups['managers'][0]]['ansible_default_ipv4']['address'] }}" ]
      when: inventory_hostname in groups['workers']

    - name: Create Docker Swarm stack file
      copy:
        content: |
          version: '3.8'
          services:
            fastapi:
              image: ghcr.io/phromaj/cloud-webapp-auto-deploy:latest
              environment:
                - DATABASE_URL=postgresql://postgres:password@db:5432/mydatabase
              ports:
                - target: 8000
                  published: 80
                  mode: host
              deploy:
                mode: global
              networks:
                - app_network
            db:
              image: postgres:15-alpine
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: password
                POSTGRES_DB: mydatabase
              volumes:
                - postgres_data:/var/lib/postgresql/data
              deploy:
                placement:
                  constraints: [node.role == manager]
              networks:
                - app_network
          networks:
            app_network:
              driver: overlay
          volumes:
            postgres_data:
        dest: /tmp/swarm-stack.yml
      when: inventory_hostname == groups['managers'][0]

    - name: Deploy Docker Swarm stack
      docker_stack:
        state: present
        name: ma_stack
        compose:
          - /tmp/swarm-stack.yml
      when: inventory_hostname == groups['managers'][0]

    - name: Force update of FastAPI service
      command: docker service update --force ma_stack_fastapi
      when: inventory_hostname == groups['managers'][0]

    - name: Wait for services to be running
      command: docker service ls --format '{{.Name}} {{.Replicas}}'
      register: service_status
      until: "'ma_stack_fastapi' in service_status.stdout and 'ma_stack_db' in service_status.stdout"
      retries: 30
      delay: 10
      when: inventory_hostname == groups['managers'][0]

    - name: Display service status
      debug:
        var: service_status.stdout_lines
      when: inventory_hostname == groups['managers'][0]
